name: CI
on: [ create, push, pull_request, deployment ]
jobs:
  core:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
      - uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'adopt'
      - name: build
        run: | 
          ./gradlew core:build
        # Terraform deploys qat, dev, stg
      - name: tf init/validate (qat)
        if: github.event_name == 'pull_request'
        run: |
          cd core-terraform/terraform
          terraform init -backend-config=conf/qat.conf -reconfigure
          terraform validate
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: tf init/validate (dev)
        if: github.event_name == 'pull_request'
        run: |
          cd core-terraform/terraform
          terraform init -backend-config=conf/dev.conf -reconfigure
          terraform validate
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: deploy to qat (terraform)
        if: github.ref == 'refs/heads/main'
        run: |
          cd core-terraform/terraform
          terraform init -backend-config=conf/qat.conf -reconfigure
          terraform apply -auto-approve -var-file=environment/qat.tfvars
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: deploy to dev (terraform)
        if: github.ref == 'refs/heads/main'
        run: |
          cd core-terraform/terraform
          terraform init -backend-config=conf/dev.conf -reconfigure
          terraform apply -auto-approve -var-file=environment/dev.tfvars
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # If main branch then deploy stg terraform
      - name: deploy to stg (terraform)
        if: startsWith(github.ref_name, "rc/" )
        run: |
          cd core-terraform/terraform
          terraform init -backend-config=conf/stg.conf -reconfigure
          terraform apply -auto-approve -var-file=environment/stg.tfvars
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  lambda:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
      - uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'adopt'
      - name: build
        run: ./gradlew lambda:build
      - name: copy jar to terraform directory
        run: |
          cp lambda/build/libs/*-all.jar lambda-terraform/terraform/lambda-${GITHUB_SHA}.jar
          echo created: lambda-terraform/terraform/lambda-${GITHUB_SHA}.jar
        # Terraform deploys qat, dev, stg
      - name: tf init/validate (qat)
        if: github.event_name == 'pull_request'
        run: |
          cd lambda-terraform/terraform
          terraform init -backend-config=conf/qat.conf -reconfigure
          terraform validate
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: tf init/validate (dev)
        if: github.event_name == 'pull_request'
        run: |
          cd lambda-terraform/terraform
          terraform init -backend-config=conf/dev.conf -reconfigure
          terraform validate
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: deploy to qat (terraform)
        if: github.ref == 'refs/heads/main'
        run: |
          cd lambda-terraform/terraform
          terraform init -backend-config=conf/qat.conf -reconfigure
          terraform apply -auto-approve -var-file=environment/qat.tfvars -var="git_hash=${GITHUB_SHA}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: deploy to dev (terraform)
        if: github.ref == 'refs/heads/main'
        run: |
          cd lambda-terraform/terraform
          terraform init -backend-config=conf/dev.conf -reconfigure
          terraform apply -auto-approve -var-file=environment/dev.tfvars -var="git_hash=${GITHUB_SHA}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # If main branch then deploy stg terraform
      - name: deploy to stg (terraform)
        if: startsWith(github.ref_name, "rc/" )
        run: |
          cd lambda-terraform/terraform
          terraform init -backend-config=conf/stg.conf -reconfigure
          terraform apply -auto-approve -var-file=environment/stg.tfvars -var="git_hash=${GITHUB_SHA}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

